<%
  import com.foursquare.recordv2.codegen.runtime.ScalaField
%>
<%@ val field: ScalaField %>
  private var ${field.varName}Obj: AnyRef = null
  private var ${field.varName}AlternateObj: AnyRef = null
  override def ${field.name}Fk[R <: com.foursquare.recordv2.Record[R] with com.foursquare.recordv2.HasPrimaryKey[${field.renderType.text}, R]](meta: com.foursquare.recordv2.MetaRecord[R]): Option[R] = {
    val foreignOpt = meta.ifInstanceFrom(${field.varName}Obj)
    if (${field.isSetName} && foreignOpt.isDefined && foreignOpt.get.primaryKey == ${field.name}OrThrow) {
      foreignOpt
    } else {
      ${field.varName}Obj = null
      None
    }
  }
  override def ${field.name}UntypedFk(meta: com.foursquare.recordv2.UntypedMetaRecord): Option[com.foursquare.recordv2.UntypedRecord with com.foursquare.recordv2.SemitypedHasPrimaryKey[${field.renderType.text}]] = {
    val foreignOpt = meta.ifInstanceFrom(${field.varName}Obj).asInstanceOf[Option[com.foursquare.recordv2.UntypedRecord with com.foursquare.recordv2.SemitypedHasPrimaryKey[${field.renderType.text}]]]
    if (${field.isSetName} && foreignOpt.isDefined && foreignOpt.get.primaryKey == ${field.name}OrThrow) {
      foreignOpt
    } else {
      ${field.varName}Obj = null
      None
    }
  }
  override def ${field.name}SetObj(x: com.foursquare.recordv2.SemitypedHasPrimaryKey[${field.renderType.text}]): Unit = {
    ${field.varName}Obj = x
  }
  override def ${field.name}AlternateFk: Option[AnyRef] = {
    if (${field.isSetName} && ${field.varName}AlternateObj != null) {
      Some(${field.varName}AlternateObj)
    } else {
      ${field.varName}AlternateObj = null
      None
    }
  }
  override def ${field.name}SetAlternateObj(x: AnyRef): Unit = {
    ${field.varName}AlternateObj = x
  }
